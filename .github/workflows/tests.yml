name: Build & Test with Coverage

on:
  push:
    branches: [ "main" ]   # Deploy nur fÃ¼r main
  pull_request:            # Bei PRs auch testen & Coverage erzeugen
    branches: [ "*" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Test with coverage
      run: >
        dotnet test --no-build --configuration Release
        /p:CollectCoverage=true
        /p:CoverletOutput=TestResults/coverage.xml
        /p:MergeWith=TestResults/coverage.xml
        /p:CoverletOutputFormat=cobertura,lcov,opencover

    - name: Generate coverage report (HTML + Badge JSON)
      run: |
        dotnet tool install --global dotnet-reportgenerator-globaltool
        reportgenerator \
          -reports:TestResults/coverage.xml \
          -targetdir:CoverageReport \
          -reporttypes:Html;Badges;JsonSummary

    # ðŸ”¹ Coverage als Artefakt anhÃ¤ngen (immer)
    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: CoverageReport

  # ðŸ”¹ Deployment nur bei main
  deploy:
    if: github.ref == 'refs/heads/main'
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: CoverageReport
