@page "/debug"
@inject QuestionService QService
@using IstqbQuiz.Shared.Models
@using System.Net

<h3>Debug-Frage</h3>

@if (questions.Count == 0)
{
    <button class="btn btn-primary" @onclick="LoadQuestions">Laden</button>
}
else
{
    <div class="mb-2">
        <label>Frage-Nr:</label>
        <input type="number" min="1" max="@questions.Count" @bind="debugIndex" style="width:60px" />
        <button class="btn btn-warning btn-sm ms-2" @onclick="ShowQuestion">Anzeigen</button>
    </div>

    @if (currentQuestion != null)
    {
        <div class="border p-3 mb-3">
            <b>Frage @debugIndex:</b>
            <div class="question-text">@ToMarkup(currentQuestion.Text)</div>

            @if (!string.IsNullOrEmpty(currentQuestion.Diagram))
            {
                <div style="text-align:center;">
                    <img src="@currentQuestion.Diagram" style="max-width:700px;height:auto;" />
                </div>
            }

            @if (currentQuestion.Table != null && currentQuestion.Table.Count > 0)
            {
                <table class="table table-bordered table-sm mb-2">
                    <thead>
                        <tr>
                            @foreach (var col in currentQuestion.Table[0].Keys)
                            {
                                <th>@col</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var row in currentQuestion.Table)
                        {
                            <tr>
                                @foreach (var val in row.Values)
                                {
                                    <td>@val</td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            }

            @if (!string.IsNullOrEmpty(currentQuestion.PostText))
            {
                <div class="question-text">@ToMarkup(currentQuestion.PostText)</div>
            }

            <ul>
                @for (int i = 0; i < currentQuestion.Options.Count; i++)
                {
                    <li>@currentQuestion.Options[i]</li>
                }
            </ul>
        </div>
    }
}

@code {
    List<Question> questions = new();
    int debugIndex = 1;
    Question? currentQuestion;

    async Task LoadQuestions()
    {
        questions = await QService.GetAllAsync();
        debugIndex = 1;
        currentQuestion = questions.FirstOrDefault();
    }

    void ShowQuestion()
    {
        if (questions.Count > 0 && debugIndex >= 1 && debugIndex <= questions.Count)
            currentQuestion = questions[debugIndex - 1];
    }

    MarkupString ToMarkup(string? s)
    {
        var text = s ?? string.Empty;
        text = WebUtility.HtmlDecode(text);
        text = text.Replace("\r\n", "<br>").Replace("\n", "<br>");
        return (MarkupString)text;
    }
}
