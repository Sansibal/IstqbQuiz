@page "/quizadvanced"
@using IstqbQuiz.Client.Services
@using IstqbQuiz.Shared.Services;
@using IstqbQuiz.Shared.Models
@using IstqbQuiz.Shared.Utils;
@inject QuizState State
@inject QuestionService QuestionService
@inject NavigationManager Nav

<h3 class="mb-4">Quiz Advanced</h3>

@if (!quizStarted)
{
    <!-- Formular für Filtereinstellungen -->
    <div class="card p-3 mb-4 shadow-sm">
        <div class="mb-3">
            <label class="form-label">Anzahl Fragen</label>
            <input type="number" class="form-control" @bind="questionCount" min="1" max="40" />
        </div>

        <div class="mb-3">
            <label class="form-label">Min. ID (Optional)</label>
            <input type="number" class="form-control" @bind="minId" />
        </div>

        <div class="mb-3">
            <label class="form-label">Max. ID (Optional)</label>
            <input type="number" class="form-control" @bind="maxId" />
        </div>

        <div class="mb-3">
            <label class="form-label">K-Level (Optional)</label>
            <select class="form-select" @bind="kLevel">
                <option value="">-- Beliebig --</option>
                <option value="1">K1</option>
                <option value="2">K2</option>
                <option value="3">K3</option>
            </select>
        </div>

        <div class="mb-3">
            <label class="form-label">Themen (Optional, Mehrfachauswahl)</label>
            <div>
                @foreach (var topic in allTopics)
                {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox"
                               value="@topic"
                               @onchange="(ChangeEventArgs e) => ToggleTopic(topic, e.Value is bool b && b)"
                               checked="@selectedTopics.Contains(topic)" />
                        <label class="form-check-label">@topic</label>
                    </div>
                }
            </div>
        </div>

        <div class="form-check mb-3">
            <input type="checkbox" class="form-check-input" id="shuffleCheck" @bind="shuffle" />
            <label class="form-check-label" for="shuffleCheck">Fragen mischen</label>
        </div>

        <button class="btn btn-primary btn-lg" @onclick="StartQuiz">Quiz starten</button>
    </div>
}
else if (loading)
{
    <div class="alert alert-info">Fragen werden geladen...</div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">Ein Fehler ist aufgetreten: @errorMessage</div>
}
else if (State.Questions.Count == 0)
{
    <div class="alert alert-warning">Keine Fragen gefunden.</div>
}
else if (currentIndex < State.Questions.Count)
{
    <!-- Quiz-UI wie in Quiz.razor -->
    <p class="fw-bold mb-3">
        Frage @(@currentIndex + 1) / @State.Questions.Count
    </p>

    <div class="question-text mb-3">
        @((MarkupString)ToMarkup(State.Questions[currentIndex].Text))
    </div>

    @if (!string.IsNullOrEmpty(State.Questions[currentIndex].Diagram))
    {
        <div class="text-center mb-3">
            <img src="@State.Questions[currentIndex].Diagram"
                 alt="Diagramm"
                 class="img-fluid rounded shadow-sm" />
        </div>
    }

    @if (State.Questions[currentIndex]?.Table?.Count > 0)
    {
        <div class="table-responsive mb-3">
            <table class="table table-bordered table-sm">
                <thead class="table-light">
                    <tr>
                        @foreach (var col in State.Questions[currentIndex].Table[0].Keys)
                        {
                            <th>@col</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var row in State.Questions[currentIndex].Table)
                    {
                        <tr>
                            @foreach (var val in row.Values)
                            {
                                <td>@val</td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    @if (!string.IsNullOrEmpty(State.Questions[currentIndex].PostText))
    {
        <div class="alert alert-secondary">
            @((MarkupString)ToMarkup(State.Questions[currentIndex].PostText))
        </div>
    }

    <div class="d-grid gap-2 mt-3">
        @for (int i = 0; i < State.Questions[currentIndex].Options.Count; i++)
        {
            var localIdx = i;
            var isSelected = State.Answers[currentIndex].Contains(localIdx);

            <button class="btn @(isSelected ? "btn-primary" : "btn-outline-secondary") text-start"
                    @onclick="() => ToggleAnswer(localIdx)">
                <strong>@(Convert.ToChar('A' + i)).</strong> @State.Questions[currentIndex].Options[i]
            </button>
        }
    </div>

    <div class="d-flex justify-content-between mt-4">
        <button class="btn btn-outline-primary" @onclick="Prev" disabled="@(currentIndex == 0)">Zurück</button>
        <button class="btn btn-primary" @onclick="Next" disabled="@(State.Answers[currentIndex].Count == 0)">Weiter</button>
    </div>
}
else
{
    <p>Berechne Ergebnis...</p>
}

@code {
    // State Variablen
    bool quizStarted = false;
    bool loading = false;
    string errorMessage = string.Empty;
    int currentIndex = 0;

    int questionCount = 10;
    int? minId = null;
    int? maxId = null;
    int? kLevel = null;
    bool shuffle = false;

    // Themenliste (müsste aus JSON kommen, hier Beispielwerte)
    List<string> allTopics = new() { "Kapitel 1 - Grundlagen des Testens",
                                     "Kapitel 2 - Testen während des Softwareentwicklungslebenszyklus",
                                     "Kapitel 3 - Statischer Test",
                                     "Kapitel 4 - Testanalyse und Testentwurf",
                                     "Kapitel 5 - Management der Testaktivitäten",
                                     "Kapitel 6 - Testwerkzeuge" };
    List<string> selectedTopics = new();

    // Toggle für Themenauswahl
    void ToggleTopic(string topic, bool isChecked)
    {
        if (isChecked)
        {
            if (!selectedTopics.Contains(topic))
                selectedTopics.Add(topic);
        }
        else
        {
            selectedTopics.Remove(topic);
        }
    }

    async Task StartQuiz()
    {
        quizStarted = true;
        loading = true;
        errorMessage = string.Empty;
        State.Clear();

        // ✅ Merker setzen: wir sind im Advanced Quiz
        State.IsAdvancedQuiz = true;

        try
        {
            var list = await QuestionService.GetDebugQuizAsync(
                count: questionCount,
                minId: minId,
                maxId: maxId,
                shuffle: shuffle,
                kLevel: kLevel,
                topics: selectedTopics
            );

            if (list == null || list.Count == 0)
            {
                errorMessage = "Keine Fragen gefunden.";
                State.Questions = new List<QuestionDto>();
            }
            else
            {
                State.Questions = list.Select(q => new QuestionDto
                {
                    Id = q.Id,
                    Text = q.Text,
                    Options = q.Options,
                    CorrectIndexes = q.CorrectIndexes,
                    Explanation = q.Explanation,
                    Explanation2 = q.Explanation2,
                    Diagram = q.Diagram,
                    Table = q.Table,
                    PostText = q.PostText,
                    PreText = q.PreText,
                    KLevel = q.KLevel,
                    Topic = q.Topic
                }).ToList();

                State.Answers = Enumerable.Range(0, State.Questions.Count)
                                          .Select(_ => new List<int>())
                                          .ToList();
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            loading = false;
            currentIndex = 0;
        }
    }


    void ToggleAnswer(int idx)
    {
        if (currentIndex < 0 || currentIndex >= State.Questions.Count) return;

        var answers = State.Answers[currentIndex];
        if (answers.Contains(idx))
            answers.Remove(idx);
        else
            answers.Add(idx);
    }

    void Next()
    {
        if (currentIndex < State.Questions.Count - 1) currentIndex++;
        else Finish();
    }

    void Prev() => currentIndex = Math.Max(0, currentIndex - 1);

    void Finish()
    {
        var mappedQuestions = State.Questions.Select(q => new Question
        {
            Id = q.Id,
            Text = q.Text,
            Options = q.Options,
            CorrectIndexes = q.CorrectIndexes,
            Explanation = q.Explanation,
            Explanation2 = q.Explanation2,
            Diagram = q.Diagram,
            Table = q.Table,
            PostText = q.PostText,
            PreText = q.PreText,
            KLevel = q.KLevel,
            Topic = q.Topic
        }).ToList();

        State.Score = QuizHelper.Score(mappedQuestions, State.Answers);
        Nav.NavigateTo("result");
    }

    string ToMarkup(string? s)
    {
        var text = s ?? string.Empty;
        text = System.Net.WebUtility.HtmlDecode(text);
        text = text.Replace("\r\n", "<br>").Replace("\n", "<br>");
        return text;
    }
}