@page "/quiz"
@using IstqbQuiz.Client.Services
@using IstqbQuiz.Shared.Models
@inject QuizState State
@inject QuestionService QuestionService
@inject NavigationManager Nav

<h3>ISTQB Quiz</h3>

@if (!quizStarted)
{
    <button class="btn btn-primary" @onclick="StartQuiz">Start (40 Fragen)</button>
}
else if (loading)
{
    <p>Fragen werden geladen...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">Ein Fehler ist aufgetreten: @errorMessage</div>
}
else if (State.Questions.Count == 0)
{
    <div class="alert alert-warning">Keine Fragen gefunden (prüfe Server/Data/questions.json).</div>
}
else if (currentIndex < State.Questions.Count)
{
    <p><strong>Frage @(@currentIndex + 1) / @State.Questions.Count</strong></p>

    <div class="question-text">@((MarkupString)ToMarkup(State.Questions[currentIndex].Text))</div>

    @if (!string.IsNullOrEmpty(State.Questions[currentIndex].Diagram))
    {
        <div style="text-align:center;">
            <img src="@State.Questions[currentIndex].Diagram" alt="Diagramm" style="max-width:700px;height:auto;margin-bottom:1rem;" />
        </div>
    }

    @if (State.Questions[currentIndex]!.Table != null && State.Questions[currentIndex]?.Table?.Count > 0 && State.Questions[currentIndex]?.Table?[0] != null)
    {
        <table class="table table-bordered table-sm mb-2">
            <thead>
                <tr>
                    @foreach (var col in State.Questions[currentIndex].Table[0].Keys)
                    {
                        <th>@col</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var row in State.Questions[currentIndex].Table)
                {
                    <tr>
                        @foreach (var val in row.Values)
                        {
                            <td>@val</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }

    @if (!string.IsNullOrEmpty(State.Questions[currentIndex]!.PostText))
    {
        <div class="question-posttext">@ToMarkup(State.Questions[currentIndex]!.PostText)</div>
    }

    <div class="mt-2">
        @for (int i = 0; i < State.Questions[currentIndex].Options.Count; i++)
        {
            var localIdx = i;
            <div class="mb-2">
                <button class="btn @(State.Answers.Count > currentIndex && State.Answers[currentIndex] == localIdx ? "btn-primary" : "btn-outline-secondary") w-100 text-start"
                        @onclick="() => Select(localIdx)">
                    @State.Questions[currentIndex].Options[i]
                </button>
            </div>
        }
    </div>

    <div class="mt-3">
        <button class="btn btn-link" @onclick="Prev" disabled="@(currentIndex==0)">Zurück</button>
        <button class="btn btn-link" @onclick="Next" disabled="@(State.Answers.Count <= currentIndex || State.Answers[currentIndex] == null)">Weiter</button>
    </div>
}
else
{
    <p>Berechne Ergebnis...</p>
}

@code {
    bool quizStarted = false;
    bool loading = false;
    string errorMessage = string.Empty;
    int currentIndex = 0;

    async Task StartQuiz()
    {
        quizStarted = true;
        loading = true;
        errorMessage = string.Empty;
        State.Clear();

        try
        {
            var list = await QuestionService.GetRandomAsync(40);
            if (list == null || list.Count == 0)
            {
                errorMessage = "Keine Fragen gefunden.";
                State.Questions = new List<QuestionDto>();
            }
            else
            {
                State.Questions = list.Select(q => new QuestionDto
                {
                    Id = q.Id,
                    Text = q.Text,
                    Options = q.Options,
                    CorrectIndex = q.CorrectIndex,
                    Explanation = q.Explanation,
                    Diagram = q.Diagram,
                    Table = q.Table,
                    PostText = q.PostText
                }).ToList();

                State.Answers = Enumerable.Repeat<int?>(null, State.Questions.Count).ToList();
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            loading = false;
            currentIndex = 0;
        }
    }

    void Select(int idx)
    {
        if (currentIndex < 0 || currentIndex >= State.Questions.Count) return;
        State.Answers[currentIndex] = idx;
    }

    void Next()
    {
        if (currentIndex < State.Questions.Count - 1) currentIndex++;
        else Finish();
    }

    void Prev() => currentIndex = Math.Max(0, currentIndex - 1);

    void Finish()
    {
        State.Score = State.Questions.Zip(State.Answers, (q, a) => (q, a))
                                     .Count(t => t.a.HasValue && t.a.Value == t.q.CorrectIndex);
        Nav.NavigateTo("result");
    }

    string ToMarkup(string? s)
    {
        var text = s ?? string.Empty;
        text = System.Net.WebUtility.HtmlDecode(text);
        text = text.Replace("\r\n", "<br>").Replace("\n", "<br>");
        return text;
    }
}
