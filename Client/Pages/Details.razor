@page "/details"
@using IstqbQuiz.Shared.Models
@using System.Net
@inject QuizState State
@inject NavigationManager Nav

<h3 class="mb-4">Detailauswertung</h3>

@if (State?.Questions == null || State.Questions.Count == 0)
{
    <p>Keine Daten vorhanden. Bitte starte zuerst ein Quiz.</p>
}
else
{
    <div class="mb-3">
        <button class="btn btn-primary me-2" @onclick="ExpandAll">Alles aufklappen</button>
        <button class="btn btn-secondary me-2" @onclick="CollapseAll">Alles zuklappen</button>
        <button class="btn btn-warning" @onclick="ToggleWrongOnly">
            @(showOnlyWrong ? "Alle Fragen anzeigen" : "Nur falsche Fragen anzeigen")
        </button>
    </div>

    @for (int i = 0; i < State.Questions.Count; i++)
    {
        var q = State.Questions[i];
        int index = i; // <-- wichtige lokale Kopie
        int? given = index < State.Answers.Count ? State.Answers[index] : null;
        bool correct = given.HasValue && given.Value == q.CorrectIndex;

        if (showOnlyWrong && correct)
            continue;

        <div class="card mb-3 shadow-sm" @key="q.Id">
            <div class="card-header bg-light d-flex justify-content-between align-items-center"
                 style="cursor:pointer;" role="button" tabindex="0"
                 @onclick="() => Toggle(index)">
                <div>
                    <span class="fw-bold">
                        @(expanded.Contains(index) ? "▾" : "▸") Frage @(index + 1) / @State.Questions.Count
                    </span>
                </div>
                <div>
                    <span class="badge @(correct ? "bg-success" : "bg-danger")">
                        @(correct ? "Richtig" : "Falsch")
                    </span>
                </div>
            </div>

            @if (expanded.Contains(index))
            {
                <div class="card-body">
                    <p class="fs-5 mb-3">@((MarkupString)FormatText(q.Text))</p>

                    @if (!string.IsNullOrEmpty(q.Diagram))
                    {
                        <div class="text-center mb-3">
                            <img src="@q.Diagram" class="img-fluid" style="max-width:700px;" />
                        </div>
                    }

                    @if (q.Table != null && q.Table.Count > 0)
                    {
                        <table class="table table-bordered table-sm mb-3">
                            <thead>
                                <tr>
                                    @foreach (var col in q.Table[0].Keys)
                                    {
                                        <th>@col</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var row in q.Table)
                                {
                                    <tr>
                                        @foreach (var val in row.Values)
                                        {
                                            <td>@val</td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }

                    @if (!string.IsNullOrEmpty(q.PostText))
                    {
                        <p>@((MarkupString)FormatText(q.PostText))</p>
                    }

                    <div class="mb-3">
                        <strong>Deine Antwort:</strong>
                        @if (given.HasValue)
                        {
                            <div class="ms-2 text-primary fs-5">@q.Options[given.Value]</div>
                        }
                        else
                        {
                            <div class="ms-2 text-muted">Keine Antwort gegeben</div>
                        }
                    </div>

                    <div class="mb-3">
                        <strong>Korrekte Antwort:</strong>
                        <div class="ms-2 text-success fs-5">@q.Options[q.CorrectIndex]</div>
                    </div>

                    @if (!string.IsNullOrWhiteSpace(q.Explanation))
                    {
                        <details class="mt-3">
                            <summary class="text-primary" style="cursor:pointer;">Warum ist das richtig?</summary>
                            <p class="mt-2">@((MarkupString)FormatText(q.Explanation))</p>
                        </details>
                    }
                </div>
            }
        </div>
    }
}

@code {
    private HashSet<int> expanded = new();
    private bool showOnlyWrong = false;

    void Toggle(int idx)
    {
        Console.WriteLine($"Toggle Clicked: {idx}, beforeCount={expanded.Count}");
        if (expanded.Contains(idx))
            expanded.Remove(idx);
        else
            expanded.Add(idx);
        Console.WriteLine($"Toggle Clicked: {idx}, Expanded Count: {expanded.Count}");
        StateHasChanged();
    }

    void ExpandAll() => expanded = State.Questions.Select((q, index) => index).ToHashSet();
    void CollapseAll() => expanded.Clear();

    void ToggleWrongOnly()
    {
        showOnlyWrong = !showOnlyWrong;
        expanded.Clear();
    }

    string FormatText(string? text)
    {
        if (string.IsNullOrWhiteSpace(text))
            return string.Empty;
        text = WebUtility.HtmlDecode(text);
        text = text.Replace("\r\n", "<br>").Replace("\n", "<br>");
        return text;
    }
}
