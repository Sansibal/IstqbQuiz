@page "/details"
@inject IstqbQuiz.Client.Services.QuizState State

<h3>Detailauswertung</h3>

@if (State.Questions == null || State.Questions.Count == 0)
{
    <p>Keine Daten gefunden. Bitte zuerst das Quiz absolvieren.</p>
}
else
{
    <div class="mb-3">
        <button class="btn btn-sm btn-outline-primary me-2" @onclick="ToggleAll">Alles auf-/zuklappen</button>
    </div>

    @for (int i = 0; i < State.Questions.Count; i++)
    {
        var q = State.Questions[i];
        bool expanded = expandedIndexSet.Contains(i);
        <div class="card mb-2">
            <div class="card-header d-flex justify-content-between align-items-center">
                <div><strong>@(i+1). @((MarkupString)ToMarkup(q.Text))</strong></div>
                <div>
                    <button class="btn btn-link" @onclick="() => Toggle(i)">@((expanded) ? "▲" : "▼")</button>
                </div>
            </div>
            @if (expanded)
            {
                <div class="card-body">
                    <p><strong>Deine Antwort:</strong>
                        @if (State.Answers.Count > i && State.Answers[i].HasValue)
                        {
                            @q.Options[State.Answers[i].Value]
                        }
                        else
                        {
                            <em>Keine Antwort</em>
                        }
                    </p>

                    <p><strong>Richtige Antwort:</strong> @q.Options[q.CorrectIndex]</p>

                    @if (!string.IsNullOrEmpty(q.Explanation))
                    {
                        <p><strong>Erklärung:</strong> @((MarkupString)ToMarkup(q.Explanation))</p>
                    }
                </div>
            }
        </div>
    }
}

@code {
    HashSet<int> expandedIndexSet = new();

    void ToggleAll()
    {
        if (expandedIndexSet.Count == State.Questions.Count)
            expandedIndexSet.Clear();
        else
            expandedIndexSet = new HashSet<int>(Enumerable.Range(0, State.Questions.Count));
    }

    void Toggle(int i)
    {
        if (expandedIndexSet.Contains(i)) expandedIndexSet.Remove(i);
        else expandedIndexSet.Add(i);
    }

    string ToMarkup(string? s)
    {
        var txt = s ?? string.Empty;
        txt = System.Net.WebUtility.HtmlDecode(txt);
        txt = txt.Replace("\r\n", "<br>").Replace("\n", "<br>");
        return txt;
    }
}
