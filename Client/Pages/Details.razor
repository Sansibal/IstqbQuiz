@page "/details"
@using IstqbQuiz.Shared.Models
@using System.Net
@inject IstqbQuiz.Client.Services.QuizState State
@inject NavigationManager Nav

<h3 class="mb-4">Detailauswertung</h3>

@if (State.IsDebugQuiz)
{
    <div class="alert alert-warning">
        <i class="bi bi-bug me-2"></i>
        <strong>Hinweis:</strong> Dieses Ergebnis stammt aus dem <em>Debug-Quiz</em>.
    </div>
}
else if (State.IsAdvancedQuiz)
{
    <div class="alert alert-info">
        <i class="bi bi-sliders me-2"></i>
        <strong>Hinweis:</strong> Dieses Ergebnis stammt aus dem <em>Advanced-Quiz</em>.
    </div>
}
else
{
    <div class="alert alert-primary">
        <i class="bi bi-question-circle me-2"></i>
        <strong>Hinweis:</strong> Dieses Ergebnis stammt aus dem <em>normalen Quiz</em>.
    </div>
}


@if (State?.Questions == null || State.Questions.Count == 0)
{
    <p>Keine Daten vorhanden. Bitte starte zuerst ein Quiz.</p>
}
else
{
    <!-- Buttons für Steuerung -->
    <div class="mb-3">
        <button class="btn btn-primary me-2" @onclick="ExpandAll">Alles aufklappen</button>
        <button class="btn btn-secondary me-2" @onclick="CollapseAll">Alles zuklappen</button>
        <button class="btn btn-warning" @onclick="ToggleWrongOnly">
            @(showOnlyWrong ? "Alle Fragen anzeigen" : "Nur falsche Fragen anzeigen")
        </button>
    </div>

    <!-- Fragenliste -->
    @for (int i = 0; i < State.Questions.Count; i++)
    {
        var q = State.Questions[i];
        int index = i;

        // Deine Antworten (Liste)
        var given = index < State.Answers.Count ? State.Answers[index] : new List<int>();

        // Korrekt, wenn Menge der Antworten exakt übereinstimmt
        bool correct = q.CorrectIndexes.OrderBy(x => x).SequenceEqual(given.OrderBy(x => x));

        if (showOnlyWrong && correct)
            continue;

        <div class="card mb-3 shadow-sm" @key="q.Id">
            <!-- Kopfzeile mit Status -->
            <div class="card-header bg-light d-flex justify-content-between align-items-center"
                 style="cursor:pointer;" role="button" tabindex="0"
                 @onclick="() => Toggle(index)">
                <div>
                    <span class="fw-bold">
                        @(expanded.Contains(index) ? "▾" : "▸") Frage @(index + 1) / @State.Questions.Count
                    </span>
                </div>
                <div>
                    <span class="badge @(correct ? "bg-success" : "bg-danger")">
                        @(correct ? "Richtig" : "Falsch")
                    </span>
                </div>
            </div>

            <!-- Inhalt der Karte -->
            @if (expanded.Contains(index))
            {
                <div class="card-body">
                    <!-- Fragetext -->
                    <p class="fs-5 mb-3">@((MarkupString)FormatText(q.Text))</p>

                    <!-- Diagramm -->
                    @if (!string.IsNullOrEmpty(q.Diagram))
                    {
                        <div class="text-center mb-3">
                            <img src="@q.Diagram" class="img-fluid rounded shadow-sm" style="max-width: 100%; height: auto;" />
                        </div>
                    }

                    <!-- Tabelle -->
                    @if (q.Table != null && q.Table.Count > 0)
                    {
                        <table class="table table-bordered table-sm mb-3">
                            <thead>
                                <tr>
                                    @foreach (var col in q.Table[0].Keys)
                                    {
                                        <th>@col</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var row in q.Table)
                                {
                                    <tr>
                                        @foreach (var val in row.Values)
                                        {
                                            <td>@val</td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }

                    <!-- PostText -->
                    @if (!string.IsNullOrEmpty(q.PostText))
                    {
                        <p>@((MarkupString)FormatText(q.PostText))</p>
                    }

                    <!-- Deine Antworten -->
                    <div class="mb-3">
                        <strong>Deine Antwort(en):</strong>
                        @if (given.Count > 0)
                        {
                            <ul class="ms-3">
                                @foreach (var g in given)
                                {
                                    var isCorrect = q.CorrectIndexes.Contains(g);
                                    <li class="fs-6 @(isCorrect ? "text-success" : "text-danger")">
                                        <strong>@(Convert.ToChar('A' + g)).</strong> @q.Options[g]
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <div class="ms-2 text-muted">Keine Antwort gegeben</div>
                        }
                    </div>

                    <!-- Richtige Antworten -->
                    <div class="mb-3">
                        <strong>Korrekte Antwort(en):</strong>
                        <ul class="ms-3">
                            @foreach (var c in q.CorrectIndexes)
                            {
                                <li class="text-success fs-6">
                                    <strong>@(Convert.ToChar('A' + c)).</strong> @q.Options[c]
                                </li>
                            }
                        </ul>
                    </div>

                    <!-- Erklärung(en) -->
                    @if (!string.IsNullOrWhiteSpace(q.Explanation) || !string.IsNullOrWhiteSpace(q.Explanation2))
                    {
                        <details class="mt-3">
                            <summary class="text-primary" style="cursor:pointer;">Warum ist das richtig?</summary>
                            <ul class="mt-2">
                                @if (!string.IsNullOrWhiteSpace(q.Explanation) && q.CorrectIndexes.Count > 0)
                                {
                                    <li>
                                        <strong>@q.Options[q.CorrectIndexes[0]]:</strong>
                                        <span>@((MarkupString)FormatText(q.Explanation))</span>
                                    </li>
                                }
                                @if (!string.IsNullOrWhiteSpace(q.Explanation2) && q.CorrectIndexes.Count > 1)
                                {
                                    <li>
                                        <strong>@q.Options[q.CorrectIndexes[1]]:</strong>
                                        <span>@((MarkupString)FormatText(q.Explanation2))</span>
                                    </li>
                                }
                            </ul>
                        </details>
                    }
                </div>
            }
        </div>
    }
}

@code {
    private HashSet<int> expanded = new();
    private bool showOnlyWrong = false;

    // Karte auf- und zuklappen
    void Toggle(int idx)
    {
        if (expanded.Contains(idx))
            expanded.Remove(idx);
        else
            expanded.Add(idx);

        StateHasChanged();
    }

    // Alle Karten öffnen
    void ExpandAll() => expanded = State.Questions.Select((q, index) => index).ToHashSet();

    // Alle Karten schließen
    void CollapseAll() => expanded.Clear();

    // Umschalten: nur falsche Fragen anzeigen
    void ToggleWrongOnly()
    {
        showOnlyWrong = !showOnlyWrong;
        expanded.Clear();
    }

    // Hilfsfunktion für sauberes HTML mit Zeilenumbrüchen
    string FormatText(string? text)
    {
        if (string.IsNullOrWhiteSpace(text))
            return string.Empty;
        text = WebUtility.HtmlDecode(text);
        text = text.Replace("\r\n", "<br>").Replace("\n", "<br>");
        return text;
    }
}
