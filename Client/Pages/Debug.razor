@page "/debug"
@inject QuestionService QService
@using IstqbQuiz.Shared.Models
@using System.Net

<h3>Debug-Fragenübersicht</h3>

@if (questions.Count == 0)
{
    <!-- Button zum Laden aller Fragen -->
    <button class="btn btn-primary" @onclick="LoadQuestions">Alle Fragen laden</button>
}
else
{
    <!-- Auswahl der Frage per Eingabe -->
    <div class="mb-3 d-flex align-items-center">
        <label class="me-2">Frage-Nr:</label>
        <input type="number" min="1" max="@questions.Count" @bind="debugIndex" style="width:80px" class="form-control d-inline-block" />
        <button class="btn btn-warning btn-sm ms-2" @onclick="ShowQuestion">Anzeigen</button>
        <span class="ms-3 text-muted">(Gesamt: @questions.Count)</span>
    </div>

    @if (currentQuestion != null)
    {
        <div class="card shadow-sm mb-4">
            <div class="card-body">
                <h5 class="card-title">Frage @debugIndex</h5>

                <!-- Fragetext -->
                <div class="question-text">@ToMarkup(currentQuestion.Text)</div>

                <!-- Optionales Diagramm -->
                @if (!string.IsNullOrEmpty(currentQuestion.Diagram))
                {
                    <div class="text-center my-3">
                        <img src="@currentQuestion.Diagram" class="img-fluid rounded" style="max-width:700px;" />
                    </div>
                }

                <!-- Optionale Tabelle -->
                @if (currentQuestion.Table != null && currentQuestion.Table.Count > 0)
                {
                    <table class="table table-bordered table-sm mt-3">
                        <thead class="table-light">
                            <tr>
                                @foreach (var col in currentQuestion.Table[0].Keys)
                                {
                                    <th>@col</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var row in currentQuestion.Table)
                            {
                                <tr>
                                    @foreach (var val in row.Values)
                                    {
                                        <td>@val</td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                }

                <!-- Optionaler PostText -->
                @if (!string.IsNullOrEmpty(currentQuestion.PostText))
                {
                    <div class="question-text mt-3">@ToMarkup(currentQuestion.PostText)</div>
                }

                <!-- ===============================
                     Antwortoptionen
                     - Alle Antworten auflisten
                     - Richtige werden grün markiert
                     =============================== -->
                <ul class="list-group mt-3">
                    @for (int i = 0; i < currentQuestion.Options.Count; i++)
                    {
                        var isCorrect = currentQuestion.CorrectIndexes.Contains(i);
                        <li class="list-group-item @(isCorrect ? "list-group-item-success fw-bold" : "")">
                            <strong>@(Convert.ToChar('A' + i)).</strong> @currentQuestion.Options[i]
                            @if (isCorrect)
                            {
                                <span class="badge bg-success ms-2">Richtig</span>
                            }
                        </li>
                    }
                </ul>

                <!-- ===============================
                     Erklärung(en) anzeigen
                     - Nur, wenn vorhanden
                     - Pro richtige Antwort eine Erklärung
                     =============================== -->
                @if (!string.IsNullOrWhiteSpace(currentQuestion.Explanation) || !string.IsNullOrWhiteSpace(currentQuestion.Explanation2))
                {
                    <div class="mt-3">
                        <h6>Erklärung:</h6>
                        <ul>
                            @if (!string.IsNullOrWhiteSpace(currentQuestion.Explanation) && currentQuestion.CorrectIndexes.Count > 0)
                            {
                                <li>

                                    @ToMarkup(currentQuestion.Explanation)
                                </li>
                            }
                            @if (!string.IsNullOrWhiteSpace(currentQuestion.Explanation2) && currentQuestion.CorrectIndexes.Count > 1)
                            {
                                <li>
                                    @ToMarkup(currentQuestion.Explanation2)
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div>
        </div>
    }
}

@code {
    // ===============================
    // State / Felder
    // ===============================
    List<Question> questions = new(); // alle geladenen Fragen
    int debugIndex = 1;               // aktuell gewählte Frage (1-basiert)
    Question? currentQuestion;        // aktuell angezeigte Frage

    // ===============================
    // Alle Fragen laden
    // ===============================
    async Task LoadQuestions()
    {
        questions = await QService.GetAllAsync();
        debugIndex = 1;
        currentQuestion = questions.FirstOrDefault();
    }

    // ===============================
    // Spezifische Frage anzeigen
    // ===============================
    void ShowQuestion()
    {
        if (questions.Count > 0 && debugIndex >= 1 && debugIndex <= questions.Count)
            currentQuestion = questions[debugIndex - 1];
    }

    // ===============================
    // Hilfsfunktion: Text als HTML
    // - Wandelt \n in <br> um
    // - Dekodiert Entities
    // ===============================
    MarkupString ToMarkup(string? s)
    {
        var text = s ?? string.Empty;
        text = WebUtility.HtmlDecode(text);
        text = text.Replace("\r\n", "<br>").Replace("\n", "<br>");
        return (MarkupString)text;
    }
}
